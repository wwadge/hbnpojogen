package ${packagename};
###
######## Macros
#macro(doCalcFullType)
###
## expand Sets using some type eg HashSet, ArrayList, etc
#if ( $property.oneToMany)
   #set ($fullType =  "Set<$property.JavaType>")
   #set ($fullJDType = "Set&lt;$property.JavaType&gt;") 
#else 
#if ( $property.manyToMany )
	#set ($fullType =  "Set<$property.manyToManyLink.dstProperty.clazz.className>")
	#set ($fullJDType =  "Set&lt;$property.manyToManyLink.dstProperty.clazz.className&gt;")
#else
   #set ($fullType =  "$property.JavaType")
   #set ($fullJDType =  "$property.JavaType")
#end
#end
#end 
#macro(lazyManyToMany)
#if ($property.isManyToManyLazyEnabledByConfig())LAZY#{else}EAGER#end
#end
#macro(lazyOneToMany)
#if ($property.isOneToManyLazyEnabledByConfig())LAZY#{else}EAGER#end
#end
#macro(lazyOneToOne)
#if ($property.isOneToOneLazyEnabledByConfig())LAZY#{else}EAGER#end
#end
#macro(lazyManyToOne)
#if ($property.isManyToOneLazyEnabledByConfig())LAZY#{else}EAGER#end
#end
#macro(doAnnotations)
#doCalcFullType()
#if ( $property.isOneToOne())
#OneToOneAnnotation($property)
#end
#if ( !$property.isComposite() && !$property.isOneToOne())
#if ( $property.isGeneratedValueAuto() )
	@GeneratedValue(strategy = GenerationType.AUTO)
#end
#if ( $property.isGeneratedValueGUID() )
	@GeneratedValue(generator = "hibernate-guid")
#end
#if ( $property.isGeneratedValueUUID() )
	@GeneratedValue(generator = "hibernate-uuid")
#end
#if ( $property.isGeneratedValueUUIDWithoutDashes() )
	@GeneratedValue(generator = "hibernate-uuid")
#end
#if ( $property.isGeneratedValueIdAware() )
	@GeneratedValue(generator = "hibernate-idaware")
#end
#if ( $property.isGeneratedValueCustom() )
	@GeneratedValue(generator = "hibernate-custom")
#end
#if ( $property.isGeneratedValuePKS() )
	@GeneratedValue(generator = "hibernate-pks")
#end
#if ( $property.isGeneratedValueSequence() )
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "$property.sequenceHibernateRef")
#end
#end	
#if ( $property.OneToMany && !$property.isOneToNForwardLinkDisabled() && (!( $class.embeddable || $class.isCompositePrimaryKey() )))
#oneToManyAnnotation($property)
#end
#if ( $property.ManyToOne)
#manyToOneAnnotation($property)
#end
#if ( $property.ManyToMany )
#doManyToMany($property)
#end
#if ( $property.isDefaultValue() )
	@org.hibernate.annotations.Generated(
		org.hibernate.annotations.GenerationTime.INSERT
	)
#end
#if($property.enumType)
#if ($class.TableObj.ContainsScrubbedEnum == true)
	@Type(type = "enumType", parameters = {@Parameter(name = "enumClass", value = "${this.getEnumPackagePath($class)}.${fullType}")})
#else
	@Enumerated(EnumType.STRING)
#end	
#end
#end
#macro(prefix)
#if ( $property.isBooleanField() && !$property.isIdField() )is#{else}get#end
#end
##
#macro(doClassType)
#if ($class.classType != "")$class.classType #end
#end
#macro(doManyToMany $property)
#if ( $property.isManyToManyInverseSide() )
	@ManyToMany( fetch = FetchType.#lazyManyToMany(), mappedBy = "${property.manyToManyLink.dstProperty.nicePropertyName}"#if ($property.isManyToManyCascadeEnabledByConfig()), cascade = { CascadeType.PERSIST, CascadeType.MERGE } #{end} )
#else
	@ManyToMany#if ($property.isManyToManyCascadeEnabledByConfig())( fetch = FetchType.#lazyManyToMany(), cascade = { CascadeType.PERSIST, CascadeType.MERGE }  )#{end}

	@JoinTable(
		name = "$property.ManyToManyLink.linkClass.tableObj.dbName",
#if (${this.isSchemaRestricted()} == true)
		catalog = "$property.ManyToManyLink.linkClass.tableObj.dbCat",
		schema = "$property.ManyToManyLink.linkClass.tableObj.dbSchema",
#end
		joinColumns = {@JoinColumn(name = "$property.ManyToManyLink.srcPropertyBounce.fieldObj.name")},
		inverseJoinColumns = {@JoinColumn(name = "$property.ManyToManyLink.dstPropertyBounce.fieldObj.name")}
	)
#end
#end
#macro(oneToManyAnnotation $property)
#if ($enableJackson == true && $enableJacksonManagedReference == true)
    @com.fasterxml.jackson.annotation.JsonManagedReference("#if (${property.oneToManyLink.clazz.isEmbeddable()})id.#{end}${property.oneToManyLink.propertyName}-$property.oneToManyLink.clazz.className")
#end
	@OneToMany( fetch = FetchType.#lazyOneToMany(), ${this.getOneToManyCascadeEnabled($property)}mappedBy = "#if (${property.oneToManyLink.clazz.isEmbeddable()})id.#{end}$property.oneToManyLink.propertyName"  )
#if ($property.isOneToManyCascadeEnabledByConfig())
 	@org.hibernate.annotations.Cascade($property.getCascadeTypeOneToMany())
#end
#end
#macro(manyToOneAnnotation $property)
#if ($enableJackson == true && $enableJacksonManagedReference == true)
	@com.fasterxml.jackson.annotation.JsonBackReference("#if (${property.manyToOneLink.clazz.isEmbeddable()})id.#{end}${property.nicePropertyName}-${class.className}")
#end

	@ManyToOne( ${this.getManyToOneCascadeEnabled($property)}fetch = FetchType.#lazyManyToOne() )
#if ($property.isManyToOneCascadeEnabledByConfig())
	@org.hibernate.annotations.Cascade($property.getCascadeTypeManyToOne())
#end
#if ( ${property.getManyToOneKey().keyLinks.size()} == 1)
	@JoinColumn(name = "${property.getManyToOneKey().keyLinks.entrySet().iterator().next().getKey()}", referencedColumnName = "$property.getManyToOneKey().keyLinks.entrySet().iterator().next().getValue()", nullable = $property.isNullable() #if($class.embeddable), insertable = false, updatable = false #end)
#else
	@JoinColumns({
#foreach ($join in ${property.getManyToOneKey().keyLinks.entrySet()})
		@JoinColumn(name = "$join.getKey()", referencedColumnName = "$join.getValue()" )#if ($velocityCount < ${property.getManyToOneKey().keyLinks.size()}),#end
		
#end
	})
#end
#end
#macro(OneToOneAnnotation $property)
#if ($property.isOneTooneInverseSide())
#if ($property.isToOneCascadeEnabledByConfig())
	@org.hibernate.annotations.Cascade($property.getCascadeTypeOneToOne()) 
#end
	@OneToOne( fetch = FetchType.#lazyOneToOne(), #if ($property.isOneToOneCascadeEnabledByConfig())cascade = CascadeType.ALL, #{end}mappedBy = "${property.getOneToOneLink().getPropertyName()}" )
#else
	@OneToOne ( fetch = FetchType.#lazyOneToOne()#if ($property.isOneToOneCascadeEnabledByConfig()), cascade = CascadeType.ALL #end)
	@JoinColumn(name = "${property.getOneToOneKey().keyLinks.entrySet().iterator().next().getKey()}"#if (${property.isNaturalOneToOneLink()}), referencedColumnName = "$property.getOneToOneKey().keyLinks.entrySet().iterator().next().getValue()"#end#if( $property.isNullable() ), nullable = true #end #if($class.embeddable), insertable = false, updatable = false #end)
#end
#end
#macro(doConstructorSignature)
#foreach( $property in $class.propertiesForConstructor )
#set( $value = $($velocityCount % 3) )
#if ( ($value == 1) && ($velocityCount != 1) )
					
			### some tabs
#end
$property.JavaType $property.propertyName#if ($velocityCount < $class.propertiesForConstructor.size()), #end
#end
#end

#macro(doClassMacros)
$classAnnotation
#if ($class.isEmbeddable())
@Embeddable
#else
@Entity#if($class.isNameAmbiguityPossible())(name = "${class.classPackage}.${class.className}")#end
#if ($class.isImmutable())
@org.hibernate.annotations.Immutable
#end
#end
#if ( $class.subclass ) 
@PrimaryKeyJoinColumn(name = "$class.extendingProperty.fieldObj.name")
#end
#if ( $class.superclass ) 
@Inheritance(strategy = InheritanceType.JOINED)
#end
 @Data @EqualsAndHashCode(callSuper=true$class.excludesFromEquals()) $class.lombokToStringCalculate()
#if ( (${class.isEmbeddable()} == false) && ((${this.isDifferentCase($class)} == true) || (${this.hasUnderscores($class)} == true) || ( (${this.isSchemaRestricted()} == true)  )))
@Table(name = "$class.tableObj.dbName"#if(!$restrictCatalog), catalog = "$class.tableObj.dbCat", schema = "$class.tableObj.dbSchema"#end)
#end
#if ($enableJackson == true)
@com.fasterxml.jackson.annotation.JsonIdentityInfo(generator = com.fasterxml.jackson.annotation.ObjectIdGenerators.PropertyGenerator.class, property="id",  scope =  ${class.className}.class)
@com.fasterxml.jackson.annotation.JsonTypeInfo(use=com.fasterxml.jackson.annotation.JsonTypeInfo.Id.CLASS, include=com.fasterxml.jackson.annotation.JsonTypeInfo.As.PROPERTY, property="_class")
#end
#if ( (${class.isGeneratedValueUUID()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-uuid",
	strategy = "uuid",
	 parameters = {
      	  @Parameter(name = "separator", value = "-")
	    }
)
#end
#if ( (${class.isGeneratedValueUUIDWithoutDashes()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-uuid",
	strategy = "uuid"
)
#end
#if ( (${class.isGeneratedValueGUID()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-guid",
	strategy = "guid"
)
#end
#if ( (${class.isGeneratedValueCustom()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-custom",
	strategy = "CustomGeneratedId"
)
#end
#if ( (${class.isGeneratedValueIDAware()} == true))
@org.hibernate.annotations.GenericGenerator(
	name = "hibernate-idaware",
	strategy = "IDPresentAwareGenerator"
)
#end
#if ($class.isDynamicUpdatesInserts())
@org.hibernate.annotations.Entity(
	dynamicInsert = true, dynamicUpdate = true
)
#end
#end
#################################### END MACROS ####################
#foreach( $import in $imports )
import $import;
#end
import lombok.*;

#set ($fullTypeOfId = "---")

#doClassMacros()
#set ($implements =  "$interfacesToShow") 
public #doClassType()class $class.className$this.doExtends($class) #if (!$implements.trim().equals(""))implements $implements#end {

	/** Serial Version UID. */
	private static final long serialVersionUID = $serial;

$classCustomCodeFields

#foreach( $property in $properties )

#if (!$property.fieldObj.comment.equals(""))
	 /**
	 * $property.fieldObj.comment
	 */
#end
#if ( ($property.idField) && (! $class.subclass) && (! $class.compositePrimaryKey ))
    @Id
#end
#if ($property.isTransientField())
    @Transient
#end
#if (! $class.embeddable  )
#doAnnotations()
#foreach ( $propAnnotation in	$property.getValidatorAnnotations() )
	$propAnnotation
#end
#if (!$property.getColumnAnnotation().isEmpty())
	$property.getColumnAnnotation()
#if (!$property.getSequenceAnnotation().isEmpty())
	$property.getSequenceAnnotation()
#end
#end
#end
#foreach ($annotation in $property.methodLevelAnnotationsOnGetters)
	$annotation
#end
#foreach ($annotation in $property.propertyLevelAnnotations)
	$annotation
#end
#if ( $property.oneToMany  && !$property.isOneToNBackLinkDisabled() )
#if ( $class.embeddable || $class.isCompositePrimaryKey() )
#oneToManyAnnotation($property)
#end
#if ($enableLombokBuilderPattern == true)
    @Builder.Default
#end
	private Set<$property.JavaType> ${property.nicePropertyName} = new HashSet<>();
#else
#if ( $property.ManyToMany )
#if ($enableLombokBuilderPattern == true)
    @Builder.Default
#end
	private Set<$property.manyToManyLink.dstProperty.clazz.className> ${property.nicePropertyName} = new HashSet<>();
#else	
#if	( $property.idField )
#if ( $class.embeddable || $class.isCompositePrimaryKey() ) 
	@Id 
#end
#set ($fullTypeOfId =  "$property.JavaType")
#end
#end
#if ( $class.embeddable || $class.isCompositePrimaryKey() )
### Hibernate is a bit broken - it wants the identifiers here in the composite key (embeddable) case
#foreach ( $propAnnotation in	$property.getValidatorAnnotations() )
	$propAnnotation
#end
#if (!$property.getColumnAnnotation().isEmpty())
	$property.getColumnAnnotation()
#end
#doAnnotations()
	private $property.JavaType $property.propertyName;

#else
##### The bug we're talking about below is: 
##### See http://opensource.atlassian.com/projects/hibernate/browse/HHH-2326?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_25739
#if ( ! $property.isManyToMany() )
	private $property.javaType $property.propertyName#if ( $property.idField && $property.fieldObj.autoInc && $property.composite) = $this.getHibernateBugWorkaround($property); // init for hibernate bug workaround#{else};#end
#end

#end
#end
#end

##
## Constructors
##
##
#if ($fullTypeOfId != "---")
#end
 

#if($class.subclass && $isSubtypeGenerationEnabled)
	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return ${class.extendsFrom.clazz.className}SubclassType enum.
 	 */
 	@Transient
 	@Override
 	public ${class.extendsFrom.clazz.className}SubclassType get${class.extendsFrom.clazz.className}SubclassType() {
		return ${class.extendsFrom.clazz.className}SubclassType.$this.convertCamelCaseToEnum(${class.className});
 	}  
#end

#if($class.superclass && $isSubtypeGenerationEnabled)
 	/**
 	 * Return an enum of the type of this subclass. This is useful to be able to use switch/case in your code.
 	 *
 	 * @return ${class.className}SubclassType enum.
 	 */
 	@Transient
 	public ${class.className}SubclassType get${class.className}SubclassType() {
		return ${class.className}SubclassType.NOT_A_CHILD;
 	}  
 #end
 
#foreach( $property in $properties )
#doCalcFullType()
## Getters
##
## one-to-many
#if ( $property.oneToMany)
	/**
	 * Adds a bi-directional link of type ${property.JavaName} to the ${property.nicePropertyName} set.
	 * @param $property.propertyName item to add
	 */
	public void add${property.JavaName}(${property.javaType} $property.propertyName) {
#foreach ($annotation in $property.methodLevelSettersPrecondition)
		$annotation
#end
		${property.propertyName}.#if (${property.oneToManyLink.clazz.isEmbeddable()})getId().#{end}set${property.oneToManyLink.javaName}(this);
		this.${property.nicePropertyName}.add($property.propertyName);
#foreach ($annotation in $property.methodLevelSettersPostcondition)
		$annotation
#end
	}
#end	
## many-to-many
#if ( $property.ManyToMany )
	/**
#if (!${property.manyToManyLink.dstProperty.isOneToNBackLinkDisabled()})
	 * Adds a bi-directional link of type ${property.JavaName} to the set.
#else
	  * Equivalent to ${property.nicePropertyName}.add($property.propertyName)
	  * (bi-directional capability has been disabled via config)
#end
	 * 
	 * @param $property.propertyName item to add
	 */
	public void add${property.JavaName}(${property.javaType} $property.propertyName) {
#if (!${property.manyToManyLink.dstProperty.isOneToNBackLinkDisabled()})
		${property.propertyName}.get${property.manyToManyLink.dstProperty.niceJavaName}().add(this);
#end
#foreach ($annotation in $property.methodLevelSettersPrecondition)
		$annotation
#end
		this.${property.nicePropertyName}.add($property.propertyName);
#foreach ($annotation in $property.methodLevelSettersPostcondition)
		$annotation
#end
	}
#end
##
## Setters
##
#end

## Join Tables
#foreach ($joinMap in $class.joinMappings)
	/** 
	* Utility method to add a ${joinMap.dstProperty.clazz.className} by using the link class table ($joinMap.linkClass.className).
#if ($joinMap.dstProperty.isOneToNBackLinkDisabled())
	* This method usually takes care of maintaining the proper bidirectional links, 
	* but backlinks have been disabled to the target object so full bi-directionality 
	* is disabled in this method (but retained for API consistency).
#end  
	* @param ${joinMap.dstProperty.clazz.getClassPropertyName()} ${joinMap.dstProperty.clazz.className} object to add
	* @return $joinMap.linkClass.className The linker object. 
	*/
	public $joinMap.linkClass.className add${joinMap.dstProperty.clazz.className}(${joinMap.dstProperty.clazz.className} ${joinMap.dstProperty.clazz.getClassPropertyName()}) {
		$joinMap.linkClass.className $joinMap.linkClass.getClassPropertyName() = new ${joinMap.linkClass.className}();
		${joinMap.linkClass.getClassPropertyName()}.set${class.className}(this);
		${joinMap.linkClass.getClassPropertyName()}.set${joinMap.dstProperty.oneToManyLink.JavaName}($joinMap.dstProperty.clazz.getClassPropertyName());
		
		this.${joinMap.linkClass.getNiceClassPropertyName()}.add($joinMap.linkClass.getClassPropertyName());
#if (!$joinMap.dstProperty.isOneToNBackLinkDisabled())
		${joinMap.dstProperty.clazz.getClassPropertyName()}.get${joinMap.linkClass.niceClassName}().add($joinMap.linkClass.getClassPropertyName());
#end
		// return the map in case we have additional fields to populate
		return $joinMap.linkClass.getClassPropertyName();
	}
#end

$classCustomCode
	
}
