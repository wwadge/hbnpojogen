package ${packagename};

import java.io.Serializable;

import jakarta.persistence.EntityManager;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.support.JpaEntityInformation;
import org.springframework.data.jpa.repository.support.JpaRepositoryFactory;
import org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean;
import org.springframework.data.repository.core.RepositoryMetadata;
import org.springframework.data.repository.core.support.RepositoryFactorySupport;

import ${packagename}.CustomRepositoryImpl;

/**
 * As copied from the spring docs. This will make spring call our custom repo implementation
 * rather than returning the default SimpleRepo. We do this to make it possible to call
 * additional methods defined in CustomRepository{Impl}.
 * 
 * @author autogenerated
 * @param <R> 
 * @param <T> 
 * @param <I> 
 *
 */
public class RepositoryFactoryBean <R extends JpaRepository<T, I>, T, I extends Serializable>
extends JpaRepositoryFactoryBean<R, T, I> {

	/**
	 * Creates a new {@link JpaRepositoryFactoryBean} for the given repository interface.
	 *
	 * @param repositoryInterface must not be {@literal null}.
	 */
	public RepositoryFactoryBean(Class<? extends R> repositoryInterface) {
		super(repositoryInterface);
	}


	protected RepositoryFactorySupport createRepositoryFactory(EntityManager entityManager) {
		return new CustomRepositoryFactory<T, I>(entityManager);
	}

	/** Internal class to make Spring data magic work.
	 * @author wwadge
	 *
	 * @param <T>
	 * @param <I>
	 */
	private static class CustomRepositoryFactory<T, I extends Serializable> extends JpaRepositoryFactory {

		/** Reference to the entity manager. */
		private EntityManager entityManager;

		/** Default constructor.
		 * @param entityManager
		 */
		public CustomRepositoryFactory(EntityManager entityManager) {
			super(entityManager);
			this.entityManager = entityManager;
		}


		@SuppressWarnings({ "rawtypes", "unchecked" })
		protected Object getTargetRepository(RepositoryMetadata metadata) {

			JpaEntityInformation<?, Serializable> entityInformation =
					getEntityInformation(metadata.getDomainType());
			
			return new CustomRepositoryImpl(entityInformation, entityManager); //custom implementation


		}

		protected Class<?> getRepositoryBaseClass(RepositoryMetadata metadata) {
			return CustomRepositoryImpl.class;
		}
		
	}
}