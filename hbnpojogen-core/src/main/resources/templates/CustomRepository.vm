package ${packagename};

import java.io.Serializable;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.NoRepositoryBean;

/**
 * Extends the jpa repo to teach it about hibernate's getReference method.
 * @author autogenerated
 * @param <T> 
 * @param <ID> 
 *
 */
@NoRepositoryBean
public interface CustomRepository<T, ID extends Serializable> extends JpaRepository<T, ID> {

	/** Returns a proxy to the given ID, does not hit DB 
	 * @param primaryKey ID to return a proxy to
	 * @return A proxy to the class */
	T getReference(ID primaryKey);
		
	/**
     * Merge the state of the given entity into the
     * current persistence context.
     * @param entity  entity instance
     * @return the managed instance that the state was merged to
     * @throws IllegalArgumentException if instance is not an
     *         entity or is a removed entity
     * @throws jakarta.persistence.TransactionRequiredException if invoked on a
     *         container-managed entity manager of type
     *         <code>PersistenceContextType.TRANSACTION</code> and there is
     *         no transaction
     */
	<T> T merge(T entity);
    
    /**
    * Merge the state of the given entity into the
    * current persistence context.
    * @param entity  entity instance
    * @return the managed instance that the state was merged to
    * @throws IllegalArgumentException if instance is not an
    *        entity or is a removed entity
    * @throws TransactionRequiredException if invoked on a
    *        container-managed entity manager of type
    *        <code>PersistenceContextType.TRANSACTION</code> and there is
    *        no transaction
    */
    void refresh(T entity);
}
